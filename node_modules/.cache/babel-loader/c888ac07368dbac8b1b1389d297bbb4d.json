{"ast":null,"code":"/*global ActiveXObject, window, console, define, module, jQuery */\n//jshint unused:false, strict: false\n\n/*\n    PDFObject v2.1.1\n    https://github.com/pipwerks/PDFObject\n    Copyright (c) 2008-2018 Philip Hutchison\n    MIT-style license: http://pipwerks.mit-license.org/\n    UMD module pattern from https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n*/\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.PDFObject = factory();\n  }\n})(this, function () {\n  \"use strict\"; //jshint unused:true\n  //PDFObject is designed for client-side (browsers), not server-side (node)\n  //Will choke on undefined navigator and window vars when run on server\n  //Return boolean false and exit function when running server-side\n\n  if (typeof window === \"undefined\" || typeof navigator === \"undefined\") {\n    return false;\n  }\n\n  var pdfobjectversion = \"2.1.1\",\n      ua = window.navigator.userAgent,\n      //declare booleans\n  supportsPDFs,\n      isIE,\n      supportsPdfMimeType = typeof navigator.mimeTypes['application/pdf'] !== \"undefined\",\n      supportsPdfActiveX,\n      isModernBrowser = function () {\n    return typeof window.Promise !== \"undefined\";\n  }(),\n      isFirefox = function () {\n    return ua.indexOf(\"irefox\") !== -1;\n  }(),\n      isFirefoxWithPDFJS = function () {\n    //Firefox started shipping PDF.js in Firefox 19.\n    //If this is Firefox 19 or greater, assume PDF.js is available\n    if (!isFirefox) {\n      return false;\n    } //parse userAgent string to get release version (\"rv\")\n    //ex: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0\n\n\n    return parseInt(ua.split(\"rv:\")[1].split(\".\")[0], 10) > 18;\n  }(),\n      isIOS = function () {\n    return /iphone|ipad|ipod/i.test(ua.toLowerCase());\n  }(),\n      //declare functions\n  createAXO,\n      buildFragmentString,\n      log,\n      embedError,\n      _embed,\n      getTargetElement,\n      generatePDFJSiframe,\n      generateEmbedElement;\n  /* ----------------------------------------------------\n     Supporting functions\n     ---------------------------------------------------- */\n\n\n  createAXO = function createAXO(type) {\n    var ax;\n\n    try {\n      ax = new ActiveXObject(type);\n    } catch (e) {\n      ax = null; //ensure ax remains null\n    }\n\n    return ax;\n  }; //IE11 still uses ActiveX for Adobe Reader, but IE 11 doesn't expose\n  //window.ActiveXObject the same way previous versions of IE did\n  //window.ActiveXObject will evaluate to false in IE 11, but \"ActiveXObject\" in window evaluates to true\n  //so check the first one for older IE, and the second for IE11\n  //FWIW, MS Edge (replacing IE11) does not support ActiveX at all, both will evaluate false\n  //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed\n\n\n  isIE = function isIE() {\n    return !!(window.ActiveXObject || \"ActiveXObject\" in window);\n  }; //If either ActiveX support for \"AcroPDF.PDF\" or \"PDF.PdfCtrl\" are found, return true\n  //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed\n\n\n  supportsPdfActiveX = function supportsPdfActiveX() {\n    return !!(createAXO(\"AcroPDF.PDF\") || createAXO(\"PDF.PdfCtrl\"));\n  }; //Determines whether PDF support is available\n\n\n  supportsPDFs = //as of iOS 12, inline PDF rendering is still not supported in Safari or native webview\n  //3rd-party browsers (eg Chrome, Firefox) use Apple's webview for rendering, and thus the same result as Safari\n  //Therefore if iOS, we shall assume that PDF support is not available\n  !isIOS && ( //Modern versions of Firefox come bundled with PDFJS\n  isFirefoxWithPDFJS || //Browsers that still support the original MIME type check\n  supportsPdfMimeType || //Pity the poor souls still using IE\n  isIE() && supportsPdfActiveX()); //Create a fragment identifier for using PDF Open parameters when embedding PDF\n\n  buildFragmentString = function buildFragmentString(pdfParams) {\n    var string = \"\",\n        prop;\n\n    if (pdfParams) {\n      for (prop in pdfParams) {\n        if (pdfParams.hasOwnProperty(prop)) {\n          string += encodeURIComponent(prop) + \"=\" + encodeURIComponent(pdfParams[prop]) + \"&\";\n        }\n      } //The string will be empty if no PDF Params found\n\n\n      if (string) {\n        string = \"#\" + string; //Remove last ampersand\n\n        string = string.slice(0, string.length - 1);\n      }\n    }\n\n    return string;\n  };\n\n  log = function log(msg) {\n    if (typeof console !== \"undefined\" && console.log) {\n      console.log(\"[PDFObject] \" + msg);\n    }\n  };\n\n  embedError = function embedError(msg) {\n    log(msg);\n    return false;\n  };\n\n  getTargetElement = function getTargetElement(targetSelector) {\n    //Default to body for full-browser PDF\n    var targetNode = document.body; //If a targetSelector is specified, check to see whether\n    //it's passing a selector, jQuery object, or an HTML element\n\n    if (typeof targetSelector === \"string\") {\n      //Is CSS selector\n      targetNode = document.querySelector(targetSelector);\n    } else if (typeof jQuery !== \"undefined\" && targetSelector instanceof jQuery && targetSelector.length) {\n      //Is jQuery element. Extract HTML node\n      targetNode = targetSelector.get(0);\n    } else if (typeof targetSelector.nodeType !== \"undefined\" && targetSelector.nodeType === 1) {\n      //Is HTML element\n      targetNode = targetSelector;\n    }\n\n    return targetNode;\n  };\n\n  generatePDFJSiframe = function generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id) {\n    var fullURL = PDFJS_URL + \"?file=\" + encodeURIComponent(url) + pdfOpenFragment;\n    var scrollfix = isIOS ? \"-webkit-overflow-scrolling: touch; overflow-y: scroll; \" : \"overflow: hidden; \";\n    var iframe = \"<div style='\" + scrollfix + \"position: absolute; top: 0; right: 0; bottom: 0; left: 0;'><iframe  \" + id + \" src='\" + fullURL + \"' style='border: none; width: 100%; height: 100%;' frameborder='0'></iframe></div>\";\n    targetNode.className += \" pdfobject-container\";\n    targetNode.style.position = \"relative\";\n    targetNode.style.overflow = \"auto\";\n    targetNode.innerHTML = iframe;\n    return targetNode.getElementsByTagName(\"iframe\")[0];\n  };\n\n  generateEmbedElement = function generateEmbedElement(targetNode, targetSelector, url, pdfOpenFragment, width, height, id) {\n    var style = \"\";\n\n    if (targetSelector && targetSelector !== document.body) {\n      style = \"width: \" + width + \"; height: \" + height + \";\";\n    } else {\n      style = \"position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;\";\n    }\n\n    targetNode.className += \" pdfobject-container\";\n    targetNode.innerHTML = \"<embed \" + id + \" class='pdfobject' src='\" + url + pdfOpenFragment + \"' type='application/pdf' style='overflow: auto; \" + style + \"'/>\";\n    return targetNode.getElementsByTagName(\"embed\")[0];\n  };\n\n  _embed = function embed(url, targetSelector, options) {\n    //Ensure URL is available. If not, exit now.\n    if (typeof url !== \"string\") {\n      return embedError(\"URL is not valid\");\n    } //If targetSelector is not defined, convert to boolean\n\n\n    targetSelector = typeof targetSelector !== \"undefined\" ? targetSelector : false; //Ensure options object is not undefined -- enables easier error checking below\n\n    options = typeof options !== \"undefined\" ? options : {}; //Get passed options, or set reasonable defaults\n\n    var id = options.id && typeof options.id === \"string\" ? \"id='\" + options.id + \"'\" : \"\",\n        page = options.page ? options.page : false,\n        pdfOpenParams = options.pdfOpenParams ? options.pdfOpenParams : {},\n        fallbackLink = typeof options.fallbackLink !== \"undefined\" ? options.fallbackLink : true,\n        width = options.width ? options.width : \"100%\",\n        height = options.height ? options.height : \"100%\",\n        assumptionMode = typeof options.assumptionMode === \"boolean\" ? options.assumptionMode : true,\n        forcePDFJS = typeof options.forcePDFJS === \"boolean\" ? options.forcePDFJS : false,\n        PDFJS_URL = options.PDFJS_URL ? options.PDFJS_URL : false,\n        targetNode = getTargetElement(targetSelector),\n        fallbackHTML = \"\",\n        pdfOpenFragment = \"\",\n        fallbackHTML_default = \"<p>This browser does not support inline PDFs. Please download the PDF to view it: <a href='[url]'>Download PDF</a></p>\"; //If target element is specified but is not valid, exit without doing anything\n\n    if (!targetNode) {\n      return embedError(\"Target element cannot be determined\");\n    } //page option overrides pdfOpenParams, if found\n\n\n    if (page) {\n      pdfOpenParams.page = page;\n    } //Stringify optional Adobe params for opening document (as fragment identifier)\n\n\n    pdfOpenFragment = buildFragmentString(pdfOpenParams); //Do the dance\n    //If the forcePDFJS option is invoked, skip everything else and embed as directed\n\n    if (forcePDFJS && PDFJS_URL) {\n      return generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id); //If traditional support is provided, or if this is a modern browser and not iOS (see comment for supportsPDFs declaration)\n    } else if (supportsPDFs || assumptionMode && isModernBrowser && !isIOS) {\n      return generateEmbedElement(targetNode, targetSelector, url, pdfOpenFragment, width, height, id); //If everything else has failed and a PDFJS fallback is provided, try to use it\n    } else if (PDFJS_URL) {\n      return generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id);\n    } else {\n      //Display the fallback link if available\n      if (fallbackLink) {\n        fallbackHTML = typeof fallbackLink === \"string\" ? fallbackLink : fallbackHTML_default;\n        targetNode.innerHTML = fallbackHTML.replace(/\\[url\\]/g, url);\n      }\n\n      return embedError(\"This browser does not support embedded PDFs\");\n    }\n  };\n\n  return {\n    embed: function embed(a, b, c) {\n      return _embed(a, b, c);\n    },\n    pdfobjectversion: function () {\n      return pdfobjectversion;\n    }(),\n    supportsPDFs: function () {\n      return supportsPDFs;\n    }()\n  };\n});","map":null,"metadata":{},"sourceType":"script"}